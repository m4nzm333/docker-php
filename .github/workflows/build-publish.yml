name: Build and Push Docker Images

on:
  # Trigger when pushing to the 'publish' branch
  push:
    branches:
      - publish
  # Manual trigger via GitHub Actions UI (workflow_dispatch)
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push the Docker images
      - name: Build and push Docker images
        run: |
          # Disable immediate exit on error to continue processing
          set +e

          # Loop through each folder and build/push the image, excluding folders that don't contain a Dockerfile
          for dir in */*; do
            # Skip directories without a Dockerfile (including the /config directory)
            if [[ ! -f "$dir/Dockerfile" ]]; then
              echo "Skipping $dir (no Dockerfile found)"
              continue
            fi

            # Skip the /config folder from being used as an image (but still copy files from it)
            if [[ "$dir" == *"/config"* ]]; then
              echo "Skipping $dir as it does not contain a Dockerfile for building an image"
              continue
            fi

            if [ -d "$dir" ]; then
              # Extract the version and folder names to form the tag
              version=$(basename $(dirname $dir))  # e.g., 7.4, 8.0
              tag=$(basename $dir)                  # e.g., fpm, fpm-nginx-alpine
              image_name="m4nzm333/php:${version}-${tag}"
              echo "Building image: $image_name"

              # Try to build and push the Docker image
              docker buildx build --push --tag $image_name $dir
              if [ $? -ne 0 ]; then
                echo "Build failed for image: $image_name, skipping..."
                continue
              fi
            fi
          done

          # Re-enable immediate exit on error
          set -e
