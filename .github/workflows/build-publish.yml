name: Docker Build and Push Only Changed Images (Excluding /config)

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "*/fpm/Dockerfile"
      - "*/fpm-nginx-alpine/Dockerfile"

jobs:
  docker-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get list of changed Dockerfiles (excluding /config)
        id: get_changed_dockerfiles
        run: |
          # Get a list of changed files in the current commit compared to the previous one
          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})

          # Filter out any changes in the /config directory
          changed_files=$(echo "$changed_files" | grep -v '^config/')

          # Filter out only the Dockerfile changes
          dockerfiles=$(echo "$changed_files" | grep 'Dockerfile')

          # Extract the version and directory from the Dockerfile paths (e.g., '7.4/fpm/Dockerfile' -> '7.4' and 'fpm')
          versions=()
          directories=()
          for file in $dockerfiles; do
            version=$(echo $file | cut -d'/' -f1)
            directory=$(echo $file | cut -d'/' -f2)
            versions+=("$version")
            directories+=("$directory")
          done

          # Save the versions and directories as environment variables
          echo "versions=${versions[@]}" >> $GITHUB_ENV
          echo "directories=${directories[@]}" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push images dynamically
        run: |
          # Loop through the versions and directories and build/push the Docker images
          for i in "${!versions[@]}"; do
            version=${versions[$i]}
            directory=${directories[$i]}
            dockerfile_path="./$version/$directory/Dockerfile"
            image_tag="m4nzm333/$version:$directory"

            echo "Building and pushing $image_tag from $dockerfile_path"
            
            # Build the Docker image
            docker build -t $image_tag -f $dockerfile_path .

            # Push the Docker image
            docker push $image_tag
          done
